"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOtp = exports.validateConfiguration = void 0;
const axios_1 = require("axios");
const constants_1 = require("./constants");
const circleci_1 = require("./circleci");
const travisci_1 = require("./travisci");
const getConfig = () => {
    const CFA_HOST = process.env.CFA_HOST || constants_1.PRIMARY_CFA_HOST;
    const CFA_SECRET = process.env.CFA_SECRET;
    if (!CFA_SECRET) {
        throw new Error('Required env var "CFA_SECRET" is missing or empty');
    }
    const CFA_PROJECT_ID = process.env.CFA_PROJECT_ID;
    if (!CFA_PROJECT_ID) {
        throw new Error('Requested env var "CFA_PROJECT_ID" is missing or empty');
    }
    return { CFA_HOST, CFA_SECRET, CFA_PROJECT_ID };
};
const getClient = () => {
    const { CFA_HOST, CFA_SECRET } = getConfig();
    return axios_1.default.create({
        baseURL: CFA_HOST,
        headers: {
            Authorization: `bearer ${CFA_SECRET}`,
        },
        validateStatus: () => true,
    });
};
const validateConfiguration = async () => {
    const { CFA_PROJECT_ID } = getConfig();
    const cfaClient = getClient();
    let slug = '';
    if (process.env.CIRCLECI) {
        slug = 'circleci';
    }
    else if (process.env.TRAVIS) {
        slug = 'travisci';
    }
    else {
        throw new Error('Unsupported CI provider, currently we only support CircleCI and TravisCI');
    }
    const response = await cfaClient.post(`/api/request/${CFA_PROJECT_ID}/${slug}/test`, {
        buildNumber: parseInt(process.env.CIRCLE_BUILD_NUM || '-1', 10),
    });
    if (response.status !== 200) {
        console.error(response.data);
        throw new Error('Your configuration for Continuous Auth is invalid, please check your config and try again');
    }
};
exports.validateConfiguration = validateConfiguration;
const getOtp = async () => {
    const { CFA_PROJECT_ID } = getConfig();
    const cfaClient = getClient();
    if (process.env.CIRCLECI) {
        const request = await (0, circleci_1.requestThroughCircleCI)(cfaClient, CFA_PROJECT_ID);
        return request.response;
    }
    else if (process.env.TRAVIS) {
        const request = await (0, travisci_1.requestThroughTravisCI)(cfaClient, CFA_PROJECT_ID);
        return request.response;
    }
    else {
        throw new Error('Unsupported CI provider, currently we only support CircleCI and TravisCI');
    }
};
exports.getOtp = getOtp;
//# sourceMappingURL=index.js.map